{
  "version": 3,
  "sources": ["../../api/uploads/url.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { z } from 'zod';\nimport { handleCors } from '../_lib/cors';\nimport { requireAuth } from '../_lib/auth';\nimport { supabaseStorage, type StorageBucket } from '../_lib/supabase';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const auth = await requireAuth(req, res);\n    if (!auth) return;\n    \n    const { bucket } = z.object({\n      bucket: z.enum(['avatars', 'gallery', 'videos'] as const)\n    }).parse(req.body);\n    \n    const result = await supabaseStorage.getUploadUrl(\n      bucket,\n      auth.userId\n    );\n    \n    res.json(result);\n  } catch (error: any) {\n    console.error('Upload URL error:', error);\n    if (error.name === 'ZodError') {\n      return res.status(400).json({ error: 'Invalid input', details: error.errors });\n    }\n    res.status(400).json({ error: error.message || 'Failed to generate upload URL' });\n  }\n}"],
  "mappings": "AACA,SAAS,SAAS;AAClB,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,uBAA2C;AAEpD,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,QAAQ;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,YAAY,KAAK,GAAG;AACvC,QAAI,CAAC,KAAM;AAEX,UAAM,EAAE,OAAO,IAAI,EAAE,OAAO;AAAA,MAC1B,QAAQ,EAAE,KAAK,CAAC,WAAW,WAAW,QAAQ,CAAU;AAAA,IAC1D,CAAC,EAAE,MAAM,IAAI,IAAI;AAEjB,UAAM,SAAS,MAAM,gBAAgB;AAAA,MACnC;AAAA,MACA,KAAK;AAAA,IACP;AAEA,QAAI,KAAK,MAAM;AAAA,EACjB,SAAS,OAAY;AACnB,YAAQ,MAAM,qBAAqB,KAAK;AACxC,QAAI,MAAM,SAAS,YAAY;AAC7B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,iBAAiB,SAAS,MAAM,OAAO,CAAC;AAAA,IAC/E;AACA,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,gCAAgC,CAAC;AAAA,EAClF;AACF;",
  "names": []
}

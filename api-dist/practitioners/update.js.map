{
  "version": 3,
  "sources": ["../../api/practitioners/update.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { handleCors } from '../_lib/cors';\nimport { requireAuth } from '../_lib/auth';\nimport { storage } from '../_lib/database';\n\n// This handler updates practitioner-specific fields (not status toggles)\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'PUT') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const auth = await requireAuth(req, res);\n    if (!auth) return;\n    \n    const existingPractitioner = await storage.getPractitioner(auth.userId);\n    if (!existingPractitioner) {\n      return res.status(404).json({ error: 'Practitioner not found' });\n    }\n    \n    // Allow updating rating and review count (typically done internally)\n    const updates = req.body;\n    \n    const practitioner = await storage.updatePractitioner(auth.userId, updates);\n    res.json(practitioner);\n  } catch (error: any) {\n    console.error('Update practitioner error:', error);\n    res.status(400).json({ error: error.message || 'Failed to update practitioner' });\n  }\n}"],
  "mappings": "AACA,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AAGxB,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,OAAO;AACxB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,YAAY,KAAK,GAAG;AACvC,QAAI,CAAC,KAAM;AAEX,UAAM,uBAAuB,MAAM,QAAQ,gBAAgB,KAAK,MAAM;AACtE,QAAI,CAAC,sBAAsB;AACzB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,yBAAyB,CAAC;AAAA,IACjE;AAGA,UAAM,UAAU,IAAI;AAEpB,UAAM,eAAe,MAAM,QAAQ,mBAAmB,KAAK,QAAQ,OAAO;AAC1E,QAAI,KAAK,YAAY;AAAA,EACvB,SAAS,OAAY;AACnB,YAAQ,MAAM,8BAA8B,KAAK;AACjD,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,gCAAgC,CAAC;AAAA,EAClF;AACF;",
  "names": []
}

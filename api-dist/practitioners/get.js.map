{
  "version": 3,
  "sources": ["../../api/practitioners/get.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { handleCors } from '../_lib/cors';\nimport { storage } from '../_lib/database';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const { id } = req.query;\n    \n    if (!id || typeof id !== 'string') {\n      return res.status(400).json({ error: 'Invalid practitioner ID' });\n    }\n    \n    const practitioner = await storage.getPractitionerWithProfile(id);\n    \n    if (!practitioner) {\n      return res.status(404).json({ error: 'Practitioner not found' });\n    }\n    \n    res.json(practitioner);\n  } catch (error: any) {\n    console.error('Get practitioner error:', error);\n    res.status(400).json({ error: error.message || 'Failed to get practitioner' });\n  }\n}"],
  "mappings": "AACA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AAExB,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,OAAO;AACxB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,IAAI;AAEnB,QAAI,CAAC,MAAM,OAAO,OAAO,UAAU;AACjC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,0BAA0B,CAAC;AAAA,IAClE;AAEA,UAAM,eAAe,MAAM,QAAQ,2BAA2B,EAAE;AAEhE,QAAI,CAAC,cAAc;AACjB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,yBAAyB,CAAC;AAAA,IACjE;AAEA,QAAI,KAAK,YAAY;AAAA,EACvB,SAAS,OAAY;AACnB,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,6BAA6B,CAAC;AAAA,EAC/E;AACF;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../api/practitioners/create.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { z } from 'zod';\nimport { handleCors } from '../_lib/cors';\nimport { requireAuth } from '../_lib/auth';\nimport { storage } from '../_lib/database';\n\n// This handler creates a practitioner record for an existing user\n// Used when a user wants to become a practitioner\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const auth = await requireAuth(req, res);\n    if (!auth) return;\n    \n    // Check if practitioner record already exists\n    const existing = await storage.getPractitioner(auth.userId);\n    if (existing) {\n      return res.status(400).json({ error: 'Practitioner record already exists' });\n    }\n    \n    // Create practitioner record\n    const practitioner = await storage.createPractitioner({\n      userId: auth.userId,\n      isOnline: false,\n      inService: false,\n      rating: \"0.0\",\n      reviewCount: 0\n    });\n    \n    // Update user's profile role to practitioner\n    await storage.updateProfile(auth.userId, { role: 'practitioner' });\n    \n    res.json(practitioner);\n  } catch (error: any) {\n    console.error('Create practitioner error:', error);\n    res.status(400).json({ error: error.message || 'Failed to create practitioner' });\n  }\n}"],
  "mappings": "AAEA,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AAIxB,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,QAAQ;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,YAAY,KAAK,GAAG;AACvC,QAAI,CAAC,KAAM;AAGX,UAAM,WAAW,MAAM,QAAQ,gBAAgB,KAAK,MAAM;AAC1D,QAAI,UAAU;AACZ,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qCAAqC,CAAC;AAAA,IAC7E;AAGA,UAAM,eAAe,MAAM,QAAQ,mBAAmB;AAAA,MACpD,QAAQ,KAAK;AAAA,MACb,UAAU;AAAA,MACV,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AAGD,UAAM,QAAQ,cAAc,KAAK,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEjE,QAAI,KAAK,YAAY;AAAA,EACvB,SAAS,OAAY;AACnB,YAAQ,MAAM,8BAA8B,KAAK;AACjD,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,gCAAgC,CAAC;AAAA,EAClF;AACF;",
  "names": []
}

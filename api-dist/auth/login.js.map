{
  "version": 3,
  "sources": ["../../api/auth/login.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { z } from 'zod';\nimport { handleCors } from '../_lib/cors';\nimport { supabase } from '../_lib/supabase';\nimport { storage } from '../_lib/database';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const { email, password } = z.object({\n      email: z.string().email(),\n      password: z.string().min(1)\n    }).parse(req.body);\n\n    // Sign in with Supabase Auth\n    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n\n    if (authError) {\n      return res.status(401).json({ error: authError.message });\n    }\n\n    if (!authData.user || !authData.session) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Get user profile\n    let profile = await storage.getProfile(authData.user.id);\n\n    // Auto-create profile for existing Supabase Auth accounts without profiles\n    if (!profile) {\n      console.log(`No profile found for ${email}, auto-creating based on email...`);\n      \n      // Determine role based on email\n      const role = email === 'chefmat2018@gmail.com' ? 'practitioner' : \n                  email === 'cheekyma@hotmail.com' ? 'guest' : \n                  'guest'; // Default to guest for any other email\n\n      // Extract display name from email\n      const displayName = email.split('@')[0].replace(/[0-9]/g, '').replace(/[._-]/g, ' ');\n\n      // Create profile\n      profile = await storage.createProfile({\n        id: authData.user.id,\n        role,\n        displayName: displayName.charAt(0).toUpperCase() + displayName.slice(1),\n        country: null,\n        bio: null,\n        avatarUrl: null,\n        galleryUrls: [],\n        videoUrl: null,\n        specialties: [],\n      });\n\n      // If practitioner, create practitioner record\n      if (role === 'practitioner') {\n        console.log('Creating practitioner record for', email);\n        await storage.createPractitioner({\n          userId: authData.user.id,\n          isOnline: false,\n          inService: false,\n          rating: \"0.0\",\n          reviewCount: 0,\n        });\n      }\n\n      console.log(`Profile auto-created for ${email} with role: ${role}`);\n    }\n\n    // Return user data and access token\n    res.json({\n      user: authData.user,\n      session: authData.session,\n      access_token: authData.session.access_token,\n      profile\n    });\n  } catch (error: any) {\n    console.error('Login error:', error);\n    if (error.name === 'ZodError') {\n      return res.status(400).json({ error: 'Invalid input', details: error.errors });\n    }\n    res.status(401).json({ error: error.message || 'Login failed' });\n  }\n}"],
  "mappings": "AACA,SAAS,SAAS;AAClB,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,eAAe;AAExB,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,QAAQ;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,EAAE,OAAO,SAAS,IAAI,EAAE,OAAO;AAAA,MACnC,OAAO,EAAE,OAAO,EAAE,MAAM;AAAA,MACxB,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,IAC5B,CAAC,EAAE,MAAM,IAAI,IAAI;AAGjB,UAAM,EAAE,MAAM,UAAU,OAAO,UAAU,IAAI,MAAM,SAAS,KAAK,mBAAmB;AAAA,MAClF;AAAA,MACA;AAAA,IACF,CAAC;AAED,QAAI,WAAW;AACb,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,UAAU,QAAQ,CAAC;AAAA,IAC1D;AAEA,QAAI,CAAC,SAAS,QAAQ,CAAC,SAAS,SAAS;AACvC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,sBAAsB,CAAC;AAAA,IAC9D;AAGA,QAAI,UAAU,MAAM,QAAQ,WAAW,SAAS,KAAK,EAAE;AAGvD,QAAI,CAAC,SAAS;AACZ,cAAQ,IAAI,wBAAwB,KAAK,mCAAmC;AAG5E,YAAM,OAAO,UAAU,0BAA0B,iBACrC,UAAU,yBAAyB,UACnC;AAGZ,YAAM,cAAc,MAAM,MAAM,GAAG,EAAE,CAAC,EAAE,QAAQ,UAAU,EAAE,EAAE,QAAQ,UAAU,GAAG;AAGnF,gBAAU,MAAM,QAAQ,cAAc;AAAA,QACpC,IAAI,SAAS,KAAK;AAAA,QAClB;AAAA,QACA,aAAa,YAAY,OAAO,CAAC,EAAE,YAAY,IAAI,YAAY,MAAM,CAAC;AAAA,QACtE,SAAS;AAAA,QACT,KAAK;AAAA,QACL,WAAW;AAAA,QACX,aAAa,CAAC;AAAA,QACd,UAAU;AAAA,QACV,aAAa,CAAC;AAAA,MAChB,CAAC;AAGD,UAAI,SAAS,gBAAgB;AAC3B,gBAAQ,IAAI,oCAAoC,KAAK;AACrD,cAAM,QAAQ,mBAAmB;AAAA,UAC/B,QAAQ,SAAS,KAAK;AAAA,UACtB,UAAU;AAAA,UACV,WAAW;AAAA,UACX,QAAQ;AAAA,UACR,aAAa;AAAA,QACf,CAAC;AAAA,MACH;AAEA,cAAQ,IAAI,4BAA4B,KAAK,eAAe,IAAI,EAAE;AAAA,IACpE;AAGA,QAAI,KAAK;AAAA,MACP,MAAM,SAAS;AAAA,MACf,SAAS,SAAS;AAAA,MAClB,cAAc,SAAS,QAAQ;AAAA,MAC/B;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAY;AACnB,YAAQ,MAAM,gBAAgB,KAAK;AACnC,QAAI,MAAM,SAAS,YAAY;AAC7B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,iBAAiB,SAAS,MAAM,OAAO,CAAC;AAAA,IAC/E;AACA,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,eAAe,CAAC;AAAA,EACjE;AACF;",
  "names": []
}

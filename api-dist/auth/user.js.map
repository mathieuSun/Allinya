{
  "version": 3,
  "sources": ["../../api/auth/user.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { handleCors } from '../_lib/cors';\nimport { requireAuth } from '../_lib/auth';\nimport { storage } from '../_lib/database';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const auth = await requireAuth(req, res);\n    if (!auth) return;\n    \n    const profile = await storage.getProfile(auth.userId);\n\n    if (!profile) {\n      return res.status(404).json({ error: 'Profile not found' });\n    }\n\n    // Also get practitioner data if user is a practitioner\n    let practitionerData = null;\n    if (profile.role === 'practitioner') {\n      practitionerData = await storage.getPractitioner(auth.userId);\n    }\n\n    res.json({\n      id: auth.userId,\n      profile,\n      practitioner: practitionerData\n    });\n  } catch (error: any) {\n    console.error('Get user error:', error);\n    res.status(400).json({ error: error.message || 'Failed to get user data' });\n  }\n}"],
  "mappings": "AACA,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AAExB,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,OAAO;AACxB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,YAAY,KAAK,GAAG;AACvC,QAAI,CAAC,KAAM;AAEX,UAAM,UAAU,MAAM,QAAQ,WAAW,KAAK,MAAM;AAEpD,QAAI,CAAC,SAAS;AACZ,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,oBAAoB,CAAC;AAAA,IAC5D;AAGA,QAAI,mBAAmB;AACvB,QAAI,QAAQ,SAAS,gBAAgB;AACnC,yBAAmB,MAAM,QAAQ,gBAAgB,KAAK,MAAM;AAAA,IAC9D;AAEA,QAAI,KAAK;AAAA,MACP,IAAI,KAAK;AAAA,MACT;AAAA,MACA,cAAc;AAAA,IAChB,CAAC;AAAA,EACH,SAAS,OAAY;AACnB,YAAQ,MAAM,mBAAmB,KAAK;AACtC,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,0BAA0B,CAAC;AAAA,EAC5E;AACF;",
  "names": []
}

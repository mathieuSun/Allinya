{
  "version": 3,
  "sources": ["../../api/auth/signup.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { z } from 'zod';\nimport { handleCors } from '../_lib/cors';\nimport { supabase } from '../_lib/supabase';\nimport { storage } from '../_lib/database';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const { email, password, full_name, role } = z.object({\n      email: z.string().email(),\n      password: z.string().min(6),\n      full_name: z.string().min(1),\n      role: z.enum(['guest', 'practitioner'])\n    }).parse(req.body);\n\n    // Create user in Supabase Auth\n    const { data: authData, error: authError } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          full_name\n        }\n      }\n    });\n\n    if (authError) {\n      return res.status(400).json({ error: authError.message });\n    }\n\n    if (!authData.user) {\n      return res.status(400).json({ error: 'Failed to create user' });\n    }\n\n    // Create profile for the new user\n    const profile = await storage.createProfile({\n      id: authData.user.id,\n      role,\n      displayName: full_name,\n      country: null,\n      bio: null,\n      avatarUrl: null,\n      galleryUrls: [],\n      videoUrl: null,\n      specialties: []\n    });\n\n    // If practitioner, create practitioner record\n    if (role === 'practitioner') {\n      await storage.createPractitioner({\n        userId: authData.user.id,\n        isOnline: false,\n        inService: false,\n        rating: \"0.0\",\n        reviewCount: 0\n      });\n    }\n\n    // Return user data and access token\n    res.json({\n      user: authData.user,\n      session: authData.session,\n      access_token: authData.session?.access_token,\n      profile\n    });\n  } catch (error: any) {\n    console.error('Signup error:', error);\n    if (error.name === 'ZodError') {\n      return res.status(400).json({ error: 'Invalid input', details: error.errors });\n    }\n    res.status(400).json({ error: error.message || 'Signup failed' });\n  }\n}"],
  "mappings": "AACA,SAAS,SAAS;AAClB,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,eAAe;AAExB,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,QAAQ;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,EAAE,OAAO,UAAU,WAAW,KAAK,IAAI,EAAE,OAAO;AAAA,MACpD,OAAO,EAAE,OAAO,EAAE,MAAM;AAAA,MACxB,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,MAC1B,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,MAC3B,MAAM,EAAE,KAAK,CAAC,SAAS,cAAc,CAAC;AAAA,IACxC,CAAC,EAAE,MAAM,IAAI,IAAI;AAGjB,UAAM,EAAE,MAAM,UAAU,OAAO,UAAU,IAAI,MAAM,SAAS,KAAK,OAAO;AAAA,MACtE;AAAA,MACA;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAED,QAAI,WAAW;AACb,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,UAAU,QAAQ,CAAC;AAAA,IAC1D;AAEA,QAAI,CAAC,SAAS,MAAM;AAClB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,wBAAwB,CAAC;AAAA,IAChE;AAGA,UAAM,UAAU,MAAM,QAAQ,cAAc;AAAA,MAC1C,IAAI,SAAS,KAAK;AAAA,MAClB;AAAA,MACA,aAAa;AAAA,MACb,SAAS;AAAA,MACT,KAAK;AAAA,MACL,WAAW;AAAA,MACX,aAAa,CAAC;AAAA,MACd,UAAU;AAAA,MACV,aAAa,CAAC;AAAA,IAChB,CAAC;AAGD,QAAI,SAAS,gBAAgB;AAC3B,YAAM,QAAQ,mBAAmB;AAAA,QAC/B,QAAQ,SAAS,KAAK;AAAA,QACtB,UAAU;AAAA,QACV,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,aAAa;AAAA,MACf,CAAC;AAAA,IACH;AAGA,QAAI,KAAK;AAAA,MACP,MAAM,SAAS;AAAA,MACf,SAAS,SAAS;AAAA,MAClB,cAAc,SAAS,SAAS;AAAA,MAChC;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAY;AACnB,YAAQ,MAAM,iBAAiB,KAAK;AACpC,QAAI,MAAM,SAAS,YAAY;AAC7B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,iBAAiB,SAAS,MAAM,OAAO,CAAC;AAAA,IAC/E;AACA,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,gBAAgB,CAAC;AAAA,EAClE;AACF;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../api/sessions/get.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { handleCors } from '../_lib/cors';\nimport { requireAuth } from '../_lib/auth';\nimport { storage } from '../_lib/database';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const auth = await requireAuth(req, res);\n    if (!auth) return;\n    \n    const { id, practitioner } = req.query;\n    \n    // If requesting sessions for a practitioner\n    if (practitioner === 'true') {\n      const userId = auth.userId;\n      \n      // Verify practitioner role\n      const profile = await storage.getProfile(userId);\n      if (!profile || profile.role !== 'practitioner') {\n        return res.status(403).json({ error: 'Only practitioners can access this endpoint' });\n      }\n\n      // Get all sessions for this practitioner (waiting and live phases)\n      const sessions = await storage.getSessionsForPractitioner(userId);\n      return res.json(sessions);\n    }\n    \n    // Otherwise, get a specific session by ID\n    if (!id || typeof id !== 'string') {\n      return res.status(400).json({ error: 'Invalid session ID' });\n    }\n    \n    const session = await storage.getSession(id);\n    \n    if (!session) {\n      return res.status(404).json({ error: 'Session not found' });\n    }\n    \n    res.json(session);\n  } catch (error: any) {\n    console.error('Get session error:', error);\n    res.status(400).json({ error: error.message || 'Failed to get session' });\n  }\n}"],
  "mappings": "AACA,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AAExB,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,OAAO;AACxB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,YAAY,KAAK,GAAG;AACvC,QAAI,CAAC,KAAM;AAEX,UAAM,EAAE,IAAI,aAAa,IAAI,IAAI;AAGjC,QAAI,iBAAiB,QAAQ;AAC3B,YAAM,SAAS,KAAK;AAGpB,YAAM,UAAU,MAAM,QAAQ,WAAW,MAAM;AAC/C,UAAI,CAAC,WAAW,QAAQ,SAAS,gBAAgB;AAC/C,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,8CAA8C,CAAC;AAAA,MACtF;AAGA,YAAM,WAAW,MAAM,QAAQ,2BAA2B,MAAM;AAChE,aAAO,IAAI,KAAK,QAAQ;AAAA,IAC1B;AAGA,QAAI,CAAC,MAAM,OAAO,OAAO,UAAU;AACjC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,IAC7D;AAEA,UAAM,UAAU,MAAM,QAAQ,WAAW,EAAE;AAE3C,QAAI,CAAC,SAAS;AACZ,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,oBAAoB,CAAC;AAAA,IAC5D;AAEA,QAAI,KAAK,OAAO;AAAA,EAClB,SAAS,OAAY;AACnB,YAAQ,MAAM,sBAAsB,KAAK;AACzC,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,wBAAwB,CAAC;AAAA,EAC1E;AACF;",
  "names": []
}

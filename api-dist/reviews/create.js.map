{
  "version": 3,
  "sources": ["../../api/reviews/create.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { z } from 'zod';\nimport { handleCors } from '../_lib/cors';\nimport { requireAuth } from '../_lib/auth';\nimport { storage } from '../_lib/database';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (handleCors(req, res)) return;\n  \n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  try {\n    const auth = await requireAuth(req, res);\n    if (!auth) return;\n    \n    const { sessionId, rating, comment } = z.object({\n      sessionId: z.string().uuid(),\n      rating: z.number().int().min(1).max(5),\n      comment: z.string().optional(),\n    }).parse(req.body);\n\n    const guestId = auth.userId;\n    \n    // Get session to verify guest and get practitioner\n    const session = await storage.getSession(sessionId);\n    if (!session) {\n      return res.status(404).json({ error: 'Session not found' });\n    }\n    \n    // Verify user is the guest for this session\n    if (session.guestId !== guestId) {\n      return res.status(403).json({ error: 'Only the session guest can create a review' });\n    }\n    \n    // Verify session has ended\n    if (session.phase !== 'ended') {\n      return res.status(400).json({ error: 'Can only review completed sessions' });\n    }\n    \n    // Create the review\n    const review = await storage.createReview({\n      sessionId,\n      guestId,\n      practitionerId: session.practitionerId,\n      rating,\n      comment: comment || null,\n    });\n    \n    // Update practitioner's rating\n    const reviews = await storage.getSessionReviews(session.practitionerId);\n    const avgRating = reviews.reduce((acc, r) => acc + (r.rating || 0), 0) / reviews.length;\n    \n    await storage.updatePractitioner(session.practitionerId, {\n      rating: avgRating.toFixed(1),\n      reviewCount: reviews.length,\n    });\n    \n    res.json(review);\n  } catch (error: any) {\n    console.error('Create review error:', error);\n    if (error.name === 'ZodError') {\n      return res.status(400).json({ error: 'Invalid input', details: error.errors });\n    }\n    res.status(400).json({ error: error.message || 'Failed to create review' });\n  }\n}"],
  "mappings": "AACA,SAAS,SAAS;AAClB,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AAExB,eAAO,QAA+B,KAAoB,KAAqB;AAC7E,MAAI,WAAW,KAAK,GAAG,EAAG;AAE1B,MAAI,IAAI,WAAW,QAAQ;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,YAAY,KAAK,GAAG;AACvC,QAAI,CAAC,KAAM;AAEX,UAAM,EAAE,WAAW,QAAQ,QAAQ,IAAI,EAAE,OAAO;AAAA,MAC9C,WAAW,EAAE,OAAO,EAAE,KAAK;AAAA,MAC3B,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;AAAA,MACrC,SAAS,EAAE,OAAO,EAAE,SAAS;AAAA,IAC/B,CAAC,EAAE,MAAM,IAAI,IAAI;AAEjB,UAAM,UAAU,KAAK;AAGrB,UAAM,UAAU,MAAM,QAAQ,WAAW,SAAS;AAClD,QAAI,CAAC,SAAS;AACZ,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,oBAAoB,CAAC;AAAA,IAC5D;AAGA,QAAI,QAAQ,YAAY,SAAS;AAC/B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,6CAA6C,CAAC;AAAA,IACrF;AAGA,QAAI,QAAQ,UAAU,SAAS;AAC7B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qCAAqC,CAAC;AAAA,IAC7E;AAGA,UAAM,SAAS,MAAM,QAAQ,aAAa;AAAA,MACxC;AAAA,MACA;AAAA,MACA,gBAAgB,QAAQ;AAAA,MACxB;AAAA,MACA,SAAS,WAAW;AAAA,IACtB,CAAC;AAGD,UAAM,UAAU,MAAM,QAAQ,kBAAkB,QAAQ,cAAc;AACtE,UAAM,YAAY,QAAQ,OAAO,CAAC,KAAK,MAAM,OAAO,EAAE,UAAU,IAAI,CAAC,IAAI,QAAQ;AAEjF,UAAM,QAAQ,mBAAmB,QAAQ,gBAAgB;AAAA,MACvD,QAAQ,UAAU,QAAQ,CAAC;AAAA,MAC3B,aAAa,QAAQ;AAAA,IACvB,CAAC;AAED,QAAI,KAAK,MAAM;AAAA,EACjB,SAAS,OAAY;AACnB,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,QAAI,MAAM,SAAS,YAAY;AAC7B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,iBAAiB,SAAS,MAAM,OAAO,CAAC;AAAA,IAC/E;AACA,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,MAAM,WAAW,0BAA0B,CAAC;AAAA,EAC5E;AACF;",
  "names": []
}

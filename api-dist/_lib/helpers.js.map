{
  "version": 3,
  "sources": ["../../api/_lib/helpers.ts"],
  "sourcesContent": ["import type { VercelRequest } from '@vercel/node';\n\n// Helper function to convert camelCase to snake_case\nexport function toSnakeCase(obj: any): any {\n  if (obj === null || obj === undefined) return obj;\n  if (obj instanceof Date) return obj.toISOString();\n  if (Array.isArray(obj)) return obj.map(toSnakeCase);\n  if (typeof obj !== 'object') return obj;\n  \n  const converted: any = {};\n  for (const key in obj) {\n    const snakeKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n    converted[snakeKey] = toSnakeCase(obj[key]);\n  }\n  return converted;\n}\n\n// Helper function to convert snake_case to camelCase\nexport function toCamelCase(obj: any): any {\n  if (obj === null || obj === undefined) return obj;\n  if (Array.isArray(obj)) return obj.map(toCamelCase);\n  if (typeof obj !== 'object') return obj;\n  \n  const converted: any = {};\n  for (const key in obj) {\n    const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n    converted[camelKey] = toCamelCase(obj[key]);\n  }\n  return converted;\n}\n\n// Helper function to parse JSON body\nexport async function parseBody(req: VercelRequest): Promise<any> {\n  if (!req.body) return null;\n  \n  // If body is already parsed (shouldn't happen in Vercel, but just in case)\n  if (typeof req.body === 'object' && !(req.body instanceof Buffer)) {\n    return req.body;\n  }\n  \n  // Parse string body\n  if (typeof req.body === 'string') {\n    try {\n      return JSON.parse(req.body);\n    } catch (e) {\n      console.error('Failed to parse string body:', e);\n      return req.body;\n    }\n  }\n  \n  // Parse Buffer body\n  if (req.body instanceof Buffer) {\n    try {\n      const bodyString = req.body.toString('utf-8');\n      return JSON.parse(bodyString);\n    } catch (e) {\n      console.error('Failed to parse buffer body:', e);\n      return req.body.toString('utf-8');\n    }\n  }\n  \n  // For streams (ReadableStream), read and parse\n  if (req.body && typeof (req.body as any).pipe === 'function') {\n    return new Promise((resolve, reject) => {\n      let data = '';\n      (req.body as any).on('data', (chunk: any) => {\n        data += chunk.toString();\n      });\n      (req.body as any).on('end', () => {\n        try {\n          resolve(data ? JSON.parse(data) : null);\n        } catch (e) {\n          console.error('Failed to parse stream body:', e);\n          resolve(data);\n        }\n      });\n      (req.body as any).on('error', reject);\n    });\n  }\n  \n  return req.body;\n}\n\n// Helper function to parse cookies\nexport function parseCookies(cookieHeader: string | undefined): Record<string, string> {\n  const cookies: Record<string, string> = {};\n  if (!cookieHeader) return cookies;\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const [key, value] = cookie.trim().split('=');\n    if (key) cookies[key] = decodeURIComponent(value || '');\n  });\n  \n  return cookies;\n}"],
  "mappings": "AAGO,SAAS,YAAY,KAAe;AACzC,MAAI,QAAQ,QAAQ,QAAQ,OAAW,QAAO;AAC9C,MAAI,eAAe,KAAM,QAAO,IAAI,YAAY;AAChD,MAAI,MAAM,QAAQ,GAAG,EAAG,QAAO,IAAI,IAAI,WAAW;AAClD,MAAI,OAAO,QAAQ,SAAU,QAAO;AAEpC,QAAM,YAAiB,CAAC;AACxB,aAAW,OAAO,KAAK;AACrB,UAAM,WAAW,IAAI,QAAQ,YAAY,KAAK,EAAE,YAAY;AAC5D,cAAU,QAAQ,IAAI,YAAY,IAAI,GAAG,CAAC;AAAA,EAC5C;AACA,SAAO;AACT;AAGO,SAAS,YAAY,KAAe;AACzC,MAAI,QAAQ,QAAQ,QAAQ,OAAW,QAAO;AAC9C,MAAI,MAAM,QAAQ,GAAG,EAAG,QAAO,IAAI,IAAI,WAAW;AAClD,MAAI,OAAO,QAAQ,SAAU,QAAO;AAEpC,QAAM,YAAiB,CAAC;AACxB,aAAW,OAAO,KAAK;AACrB,UAAM,WAAW,IAAI,QAAQ,aAAa,CAAC,GAAG,WAAW,OAAO,YAAY,CAAC;AAC7E,cAAU,QAAQ,IAAI,YAAY,IAAI,GAAG,CAAC;AAAA,EAC5C;AACA,SAAO;AACT;AAGA,eAAsB,UAAU,KAAkC;AAChE,MAAI,CAAC,IAAI,KAAM,QAAO;AAGtB,MAAI,OAAO,IAAI,SAAS,YAAY,EAAE,IAAI,gBAAgB,SAAS;AACjE,WAAO,IAAI;AAAA,EACb;AAGA,MAAI,OAAO,IAAI,SAAS,UAAU;AAChC,QAAI;AACF,aAAO,KAAK,MAAM,IAAI,IAAI;AAAA,IAC5B,SAAS,GAAG;AACV,cAAQ,MAAM,gCAAgC,CAAC;AAC/C,aAAO,IAAI;AAAA,IACb;AAAA,EACF;AAGA,MAAI,IAAI,gBAAgB,QAAQ;AAC9B,QAAI;AACF,YAAM,aAAa,IAAI,KAAK,SAAS,OAAO;AAC5C,aAAO,KAAK,MAAM,UAAU;AAAA,IAC9B,SAAS,GAAG;AACV,cAAQ,MAAM,gCAAgC,CAAC;AAC/C,aAAO,IAAI,KAAK,SAAS,OAAO;AAAA,IAClC;AAAA,EACF;AAGA,MAAI,IAAI,QAAQ,OAAQ,IAAI,KAAa,SAAS,YAAY;AAC5D,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,OAAO;AACX,MAAC,IAAI,KAAa,GAAG,QAAQ,CAAC,UAAe;AAC3C,gBAAQ,MAAM,SAAS;AAAA,MACzB,CAAC;AACD,MAAC,IAAI,KAAa,GAAG,OAAO,MAAM;AAChC,YAAI;AACF,kBAAQ,OAAO,KAAK,MAAM,IAAI,IAAI,IAAI;AAAA,QACxC,SAAS,GAAG;AACV,kBAAQ,MAAM,gCAAgC,CAAC;AAC/C,kBAAQ,IAAI;AAAA,QACd;AAAA,MACF,CAAC;AACD,MAAC,IAAI,KAAa,GAAG,SAAS,MAAM;AAAA,IACtC,CAAC;AAAA,EACH;AAEA,SAAO,IAAI;AACb;AAGO,SAAS,aAAa,cAA0D;AACrF,QAAM,UAAkC,CAAC;AACzC,MAAI,CAAC,aAAc,QAAO;AAE1B,eAAa,MAAM,GAAG,EAAE,QAAQ,YAAU;AACxC,UAAM,CAAC,KAAK,KAAK,IAAI,OAAO,KAAK,EAAE,MAAM,GAAG;AAC5C,QAAI,IAAK,SAAQ,GAAG,IAAI,mBAAmB,SAAS,EAAE;AAAA,EACxD,CAAC;AAED,SAAO;AACT;",
  "names": []
}

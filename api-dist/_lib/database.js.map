{
  "version": 3,
  "sources": ["../../api/_lib/database.ts"],
  "sourcesContent": ["import { supabase } from './supabase';\nimport { toSnakeCase, toCamelCase } from './helpers';\n\n// Storage operations interface\nexport const storage = {\n  async getProfile(id: string) {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching profile:', error);\n      return undefined;\n    }\n    \n    return toCamelCase(data);\n  },\n\n  async createProfile(profile: any) {\n    const snakeCaseProfile = toSnakeCase(profile);\n    \n    const { data, error } = await supabase\n      .from('profiles')\n      .insert({\n        ...snakeCaseProfile,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return toCamelCase(data);\n  },\n\n  async updateProfile(id: string, updates: any) {\n    const snakeCaseUpdates = toSnakeCase(updates);\n    \n    const { data, error} = await supabase\n      .from('profiles')\n      .update({\n        ...snakeCaseUpdates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Supabase update error:', error);\n      throw error;\n    }\n    return toCamelCase(data);\n  },\n\n  async getPractitioner(userId: string) {\n    const { data, error } = await supabase\n      .from('practitioners')\n      .select('*')\n      .eq('user_id', userId)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching practitioner:', error);\n      return undefined;\n    }\n    \n    return toCamelCase(data);\n  },\n\n  async createPractitioner(practitioner: any) {\n    const snakeCasePractitioner = toSnakeCase(practitioner);\n    \n    const { data, error } = await supabase\n      .from('practitioners')\n      .insert({\n        ...snakeCasePractitioner,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return toCamelCase(data);\n  },\n\n  async updatePractitioner(userId: string, updates: any) {\n    const snakeCaseUpdates = toSnakeCase(updates);\n    \n    const { data, error } = await supabase\n      .from('practitioners')\n      .update({\n        ...snakeCaseUpdates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('user_id', userId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Supabase updatePractitioner error:', error);\n      throw error;\n    }\n    return toCamelCase(data);\n  },\n\n  async getAllPractitioners() {\n    const { data: practitioners, error: practError } = await supabase\n      .from('practitioners')\n      .select('*')\n      .order('is_online', { ascending: false })\n      .order('rating', { ascending: false });\n    \n    if (practError) {\n      console.error('Error fetching practitioners:', practError);\n      throw practError;\n    }\n    \n    if (!practitioners || practitioners.length === 0) {\n      return [];\n    }\n    \n    const userIds = practitioners\n      .map((p: any) => p.user_id)\n      .filter((id: any) => id != null && id !== 'undefined');\n    \n    if (userIds.length === 0) {\n      return [];\n    }\n    \n    const { data: profiles, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .in('id', userIds);\n    \n    if (profileError) {\n      console.error('Error fetching profiles:', profileError);\n      throw profileError;\n    }\n    \n    const profileMap = new Map((profiles || []).map((p: any) => [p.id, p]));\n    const result = practitioners\n      .filter((pract: any) => pract.user_id != null && pract.user_id !== 'undefined')\n      .map((pract: any) => ({\n        ...toCamelCase(pract),\n        profile: toCamelCase(profileMap.get(pract.user_id) || {})\n      }));\n    \n    return result;\n  },\n\n  async getOnlinePractitioners() {\n    const { data: practitioners, error: practError } = await supabase\n      .from('practitioners')\n      .select('*')\n      .eq('is_online', true);\n    \n    if (practError) {\n      console.error('Error fetching online practitioners:', practError);\n      throw practError;\n    }\n    \n    if (!practitioners || practitioners.length === 0) {\n      return [];\n    }\n    \n    const userIds = practitioners\n      .map((p: any) => p.user_id)\n      .filter((id: any) => id != null);\n    \n    if (userIds.length === 0) {\n      return [];\n    }\n    \n    const { data: profiles, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .in('id', userIds);\n    \n    if (profileError) {\n      console.error('Error fetching profiles:', profileError);\n      throw profileError;\n    }\n    \n    const profileMap = new Map((profiles || []).map((p: any) => [p.id, p]));\n    const result = practitioners\n      .filter((pract: any) => pract.user_id != null)\n      .map((pract: any) => ({\n        ...toCamelCase(pract),\n        profile: toCamelCase(profileMap.get(pract.user_id) || {})\n      }));\n    \n    return result;\n  },\n\n  async getPractitionerWithProfile(userId: string) {\n    const practitioner = await this.getPractitioner(userId);\n    if (!practitioner) return undefined;\n    \n    const profile = await this.getProfile(userId);\n    if (!profile) return undefined;\n    \n    return {\n      ...practitioner,\n      profile\n    };\n  },\n\n  async getSession(id: string) {\n    const { data: session, error } = await supabase\n      .from('sessions')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error || !session) {\n      console.error('Error fetching session:', error);\n      return undefined;\n    }\n    \n    const guestProfile = await this.getProfile(session.guest_id);\n    const practitionerData = await this.getPractitionerWithProfile(session.practitioner_id);\n    \n    return {\n      ...toCamelCase(session),\n      guest: guestProfile,\n      practitioner: practitionerData\n    };\n  },\n\n  async getSessionsForPractitioner(practitionerId: string) {\n    const { data: sessions, error } = await supabase\n      .from('sessions')\n      .select('*')\n      .eq('practitioner_id', practitionerId)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error fetching sessions:', error);\n      return [];\n    }\n    \n    const sessionsWithParticipants = await Promise.all(\n      sessions.map(async (session: any) => {\n        const guestProfile = await this.getProfile(session.guest_id);\n        const practitionerData = await this.getPractitionerWithProfile(session.practitioner_id);\n        \n        return {\n          ...toCamelCase(session),\n          guest: guestProfile,\n          practitioner: practitionerData\n        };\n      })\n    );\n    \n    return sessionsWithParticipants;\n  },\n\n  async createSession(session: any) {\n    const snakeCaseSession = toSnakeCase(session);\n    \n    const { data, error } = await supabase\n      .from('sessions')\n      .insert({\n        ...snakeCaseSession,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return toCamelCase(data);\n  },\n\n  async updateSession(id: string, updates: any) {\n    const snakeCaseUpdates = toSnakeCase(updates);\n    \n    const { data, error } = await supabase\n      .from('sessions')\n      .update({\n        ...snakeCaseUpdates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Supabase updateSession error:', error);\n      throw error;\n    }\n    return toCamelCase(data);\n  },\n\n  async createReview(review: any) {\n    const snakeCaseReview = toSnakeCase(review);\n    \n    const { data, error } = await supabase\n      .from('reviews')\n      .insert({\n        ...snakeCaseReview,\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return toCamelCase(data);\n  },\n\n  async getSessionReviews(sessionId: string) {\n    const { data, error } = await supabase\n      .from('reviews')\n      .select('*')\n      .eq('session_id', sessionId);\n    \n    if (error) {\n      console.error('Error fetching reviews:', error);\n      return [];\n    }\n    \n    return (data || []).map(toCamelCase);\n  }\n};"],
  "mappings": "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",
  "names": []
}
